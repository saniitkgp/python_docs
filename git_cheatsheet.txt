#----------------------setting up user name and email id-----------------
--global :- it make changes in all repository if we specify the keyword
			if we not specify it will change for current or local repository
			ls
1. set/change user name.
	## for global user
		$ git config --global user.name "user_name"
	## for local user
		git config  user.name "user_name"
2. set/change user email.
	## for global user
		$ git config --global user.email "user_email@gmail.com"
	## for local user
		$ git config user.email "user_email@gmail.com"
3. see who is the user name or email
	## for global user
		$ git config --global user.name  o/p:-> user_name
		$ git config --global user.emai   o/p:-> user_email@gmail.com
	## for local userrea
		$ git config user.name  o/p:-> user_name
		$ git config user.emai   o/p:-> user_email@gmail.com
	
#---------------------initalising the new project/ repogitory------------

# First we need to create folder or file where we want to start our project/repo. 
Step 1. Go to folder/ project
Step 2.  Run the command 
		$ git init  :- it will create some .git file (hidden) which is used to manage.
		
#---------------------working with staging --------------------------------

## When do change with any file then we want to this file should be present in our central 
Repository/server. For doing so we have following step.

step1. add file for staging
	$ git add file_name  # this of specify file/folder
	$ git add . 		 # This is for all file /folder 
step 2. check the status of file in staging
	$ git status  o/p:-> will display all file that has added for staging
step 3. commit the changes. 
	$ git commit 
	$ git commit -m "comments what changes has done."
step 4. push the change to central repository
	$ git push.  # it will push the change of current repository to server. To know repo details do :- ls -la; cd .git; cat config :-> it will show url 
	## for pushing file in any branch
	$ git push origin branch_name
	
step 5. if want to pull the changes. 
	$ git pull

#-----------------------------------------delete of file from staging area-----------------------------------

# git rm --chached file_name 
	
#--------------------------------modification-----------------------------------

# To see the log/ or commit information
	$ git log
	

#-----------------------branches -----------------------------
** Branch :-  This the feature of the git to work parallel on original and experimental code. we want to work on experimental code and once we satisfy then we want to merge with original code. Git provide this functionality using Branch command.

						master
O-----------O---------O
            |               branches
			|-------------O------------O
			
1. List all present branches. 
  $ git branch  <- enter
  o/p:-> list of branch 
			* main_branch_name  (which currently active is shown by *)
			second_branch_name   (if present)
			third_branch_name 

2. Create Branch
	$ git branch branch_name
	
3. Activate any branch
	$ git checkout branch_name
	o/p:-> switched to branch branch_name
	
	NOTE:-> now master branch is changed to branch_name. When we run list command * will shows at front of branch_name that we make active.
## we can create and activate brach in one command 
	$ git checkout -b branch_name 
	
** Merge :-After branch creation if made some change and commit them. Then it will remain only with newly created branch and once we switched to master branch all change will disappear. Suppose if we finalise our change and want to merge into main/master branch.

step 1. Activate branch in which you want to merge. (I want to merge changes into master so i will checkout to master) 
	$ git checkout master
step 2. merge the experimental branch 
	$ git merge branch_name

## push the branch code in git hub
	$ git push --set-upstream origin branch_name

## Delete :- suppose we want to delete.
	$ git branch -d branch_name
	o/p:-> deleted branch dummy (some)
	
## rename the branch name 	
	git branch -m <oldname> <newname>  #if you want to rename a branch while pointed to any branch, do:
									
	git branch -m <newname> #If you want to rename the current branch, you can do:


#-------------------git ignore file -----------------------

touch .gitignore  # create git ignore file using bash
folder :- .gitignore. # window gui system 

** folder structure start from git folder.

#  ignore file start with T or t example [temp/ Temp]
/[tT]emp/ 

# ignore complete folder and it file
	ex :-  /path_folder/
# ignore all file in the folder except one/two file 
	ex:- /path_folder/*  # it say ignore all file in the folder 
		!/path_folder/added_file     # it say not ignore the added file

# ! mark is used to not ignore file or folder 
	ex:- 
	  !/temp/  # not ignore temp folder 


