use database name
show create table demo;
create database
desc table;
-- DDL ------------------------------------------------------------------ 

create - create table table_name 
drop - drop table table_name
alter - alter table table add,modify,drop, rename,
truncate - truncate table table_name
alter - alter table table_name rename column  column_name to new_column_name;
		alter table demo drop column name;
		alter table demo modify Marks decimal(10,2);
		alter table demo add column name varchar(100);
rename - rename table demoname to demo;
constraint  - constraint constraint_name constraint_keywork expression 
			 constraint table_check_age_gt_18 check (age >=18)    --constraint_name is option by defalut table_name_chk_1 etc
			 alter table demo add constraint demo_mark_gt_0 check (marks >0); 
			 alter table demo drop constraint demo_mark_gt_0;
unique -	alter table demo add constraint demo_unique_id unique (id);
			alter table demo drop constraint demo_unique_id ;
-- DML ---------------------------------------------------------------------

select  - select * from tabl where group by having order by 
insert -  insert into table_name  (column_names) values (values_of_the_column)
update - update table_name set column_name = vauel condition
delete - delete table table_name condition 

--------------------------------------------------------------------------------
ex:-> 
		id	std_id	Name	Marks
		1	3	Abhi		99
		2	5	Geethasri	89
		3	6	Rahim		49
		4	9	Ram			69
		5	1	Rahul		87
		6	1	Rahul		96
		7	1	Rahul		96
		8	9	Ram			96
		9	9	Ram			96

		
row_number :- it used to assign numbering to the data.
			  1. it gives nubering to data wheather data are same or not.
				ex:- select *, row_number()over(order by marks desc) as rn from demo;
					# id	std_id	Name	Marks	rn
						1	3	Abhi		99		1
						6	1	Rahul		96		2
						7	1	Rahul		96		3
						8	9	Ram			96		4
						9	9	Ram			96		5
						2	5	Geethasri	89		6
						5	1	Rahul		87		7
						4	9	Ram			69		8
						3	6	Rahim		49		9

			  2. if partition by used then it making rank based on order by clouse value in the group if present otherwise on partition value.
			  
			  ex:-> select *, row_number()over(partition by std_id  order by marks desc) as rn from demo;
					# id	std_id	Name	Marks	rn
						6	1	Rahul			96	1
						7	1	Rahul			96	2
						5	1	Rahul			87	3
						1	3	Abhi			99	1
						2	5	Geethasri		89	1
						3	6	Rahim			49	1
						8	9	Ram				96	1
						9	9	Ram				96	2
						4	9	Ram				69	3

dense_rank() :- it used to asssign rank to data. if two data have same value then it assign same rank. 
				1. it uses continueous ranking.
				ex:-> select *, dense_rank()over(order by marks desc) as rn from demo;
					# id	std_id	Name	Marks	rn
						1	3		Abhi		99	1
						6	1		Rahul		96	2
						7	1		Rahul		96	2
						8	9		Ram			96	2
						9	9		Ram			96	2
						2	5		Geethasri	89	3
						5	1		Rahul		87	4
						4	9		Ram			69	5
						3	6		Rahim		49	6

				2. if partition by used then it making rank based on order by clouse value in the group if present otherwise on partition value.
				
				ex:- select *, dense_rank()over(partition by std_id order by marks desc) as rn from demo;
				# id	std_id	Name	Marks	rn
					6	1		Rahul		96	1
					7	1		Rahul		96	1
					5	1		Rahul		87	2
					1	3		Abhi		99	1
					2	5		Geethasri	89	1
					3	6		Rahim		49	1
					8	9		Ram			96	1
					9	9		Ram			96	1
					4	9		Ram			69	2

rank() :-> it used to asssign rank to data. if two data have same value then it assign same rank.
				1. it uses skip rank 
				
				ex:->select *, rank()over(order by marks desc) as rn from demo;   (note the ranking is skiped )
				# id	std_id	Name	Marks	rn
					1	3		Abhi		99	1
					6	1		Rahul		96	2
					7	1		Rahul		96	2
					8	9		Ram			96	2
					9	9		Ram			96	2
					2	5		Geethasri	89	6
					5	1		Rahul		87	7
					4	9		Ram			69	8
					3	6		Rahim		49	9

				2. if partition by used then it making rank based on order by clouse value in the group if present otherwise on partition value.

				ex:-> select *, rank()over(partition by std_id order by marks desc) as rn from demo;
				# id	std_id	Name	Marks	rn
					6	1		Rahul		96	1
					7	1		Rahul		96	1
					5	1		Rahul		87	3
					1	3		Abhi		99	1
					2	5		Geethasri	89	1
					3	6		Rahim		49	1
					8	9		Ram			96	1
					9	9		Ram			96	1
					4	9		Ram			69	3


	

-- -----------------------------------------------------------------------------
-- regexp

*	Zero or more instances of string preceding it
+	One or more instances of strings preceding it
.	Any single character
?	Match zero or one instances of the strings preceding it.
^	caret(^) matches Beginning of string  exmple (regexp '^sa')
$	End of string   							(regexp 'sa$')
[abc]	Any character listed between the square brackets
[^abc]	Any character not listed between the square brackets
[A-Z]	match any upper case letter
[a-z]	match any lower case letter
[0-9]	match any digit from 0 through to 9.
[[:<:]]	matches the beginning of words.
[[:>:]]	matches the end of words.
[:class:]	matches a character class i.e. [:alpha:] to match letters, [:space:] to match white space, [:punct:] is match punctuations and [:upper:] for upper class letters.
p1|p2|p3	Alternation; matches any of the patterns p1, p2, or p3
{n}	n instances of preceding element
{m,n}	m through n instances of preceding element


Query to find all the names starting with a vowel and ending with 'ok' âˆ’
mysql> SELECT FirstName FROM intque.person_tbl WHERE FirstName REGEXP '^[aeiou].*ok$';

 select * from demo where name in ('abhi','geethasri');
 select * from demo where name regexp '^abh.|geeth.'
 
 select substring_index('www mysql com',' ',1)as fn,
	substring_index(substring_index('www mysql com',' ',2),' ',-1)as mn,
    substring_index('www mysql com',' ',-1)as ln ;
	
	
-----------finding the n higest-----------
select * from student 
where 
marks =
(select distinct marks from student order by marks desc limit 1,1);
 
 
select id, std_id, Name, Marks from demo where marks = 
(select distinct marks from demo order by marks desc limit 2,1) limit 1;



-----------finding the duplicates-----------
select * , count(*) d from demo group by std_id, name, marks having d >1;


select id, std_id, Name, Marks from (select *, row_number() over(partition by std_id, Name, Marks)
as d from demo) 
as temp where temp.d =2;

--  ---------find nth record from table --------------
select id, std_id, Name, marks 
from 
(select *, row_number()over(order by id asc) as r_no
 from demo) as temp_tbl
 where temp_tbl.r_no = 2;
 
 
select id, std_id, Name, marks 
from 
(select *, row_number()over(order by id desc) as r_no
 from demo) as temp_tbl
 where temp_tbl.r_no <= 4 order by id;
 
 
 select * from demo limit 4;
 
 -- -----------------top n higest sallary -----------
 select id, std_id , name , marks
 from 
 (select *, 
 row_number()over(partition by marks ) as rn
 from demo) as tt 
  where tt.rn = 1 order by marks desc limit 3;
  
  -- -----------even and odd record ----------------
   select id,std_id,name,marks 
 from 
 (select *, row_number()over(order by id)as rn
 from demo ) as tt
 where tt.rn %2 !=0;
 
 
 ----------------------------------------minus and intersect-----
 select * from demo d
where  exists (
 select * from student s where s.marks = d.marks);  -- intersect-----
 
  select * from demo d
where not exists (
 select * from student s where s.marks = d.marks);   -- minus---
 	




Create Database temp;

use Temp;

Create Table Dept (
dept_id int not null unique,
dept_name varchar(255),
constraint PK_Dept_dept_id Primary Key (dept_id)
);

Create Table Emp (
emp_id int not null Unique,
emp_name varchar (255),
sallary decimal (10,4),
dept_id int,
constraint PK_Emp_emp_id primary key (emp_id),
constraint FK_Emp_dept_id Foreign Key (dept_id) References Dept(dept_id)    -- This is the child table for this foreign key 
);

Desc Emp;

Desc Dept;

Select * from Emp;

select * from Dept;

Insert Into Dept (dept_id,dept_name) Values (1,'xyz');
Insert Into Dept (dept_id,dept_name) Values (2,'abc'),(3,'uvw');

insert into Emp(emp_id, sallary,dept_id, emp_name) Values (101,100,1,'sanjeev');
insert into Emp(emp_id,emp_name, sallary,dept_id) Values (102,'kumar',300,2),(103,'niraj', 300,4),(104,'deepak', 300,3),(105,'suraj' 300,3); 

Update Emp set emp_name = 'sanjeev' where emp_id = 101;  -- if condition is not applied Then it will update all columns;





Insert Into Dept (dept_id,dept_name) Values (1,'xyz');
Insert Into Dept (dept_id,dept_name) Values (3,'abc'),(2,'uvw');

insert into Emp(emp_id, sallary,dept_id, emp_name) Values (101,100,1,'sanjeev');
insert into Emp(emp_id,emp_name, sallary,dept_id) Values (102,'kumar',300,2),(103,'niraj', 600,3),(104,'deepak', 900,3),(105,'suraj', 400,4); 

-- truncate table emp;
select * from dept;
select * from emp;

select e.emp_id,e.emp_name,e.sallary,e.dept_id,d.dept_name 
from emp e
left dept d using(dept_id);



Table -- Emp
emp_id, emp_name, sallary,dept_id
101	sanjeev	100.0000	1
102	kumar	300.0000	2
103	niraj	500.0000	3
104	deepak	400.0000	2
105	suraj	300.0000	3

Table --Dept
dept_id, dept_name
1	xyx
2	abc
3	uvw
	
Quey -------
#------------------------------------------------------------------------------------
select * ,count(*) from Emp where sallary >100 group by dept_id having sallary > 300;

# emp_id, emp_name, sallary, dept_id, count(*)
	'103', 'niraj', '500.0000', '3', '2'

#--------------------------------------------------------------------------------------
select * ,count(*) from Emp group by dept_id having sallary > 200;

# emp_id, emp_name, sallary, dept_id, count(*)
'102', 'kumar', '300.0000', '2', '2'
'103', 'niraj', '500.0000', '3', '2'

#--------------------------------------------------------------------------------------
select emp.emp_id,emp.emp_name, emp.sallary, emp.dept_id, dept.dept_name  
from  Emp as emp 
right join Dept as dept 
on 
emp.dept_id = dept.dept_id;

#----------------------------------------------------------------------------------------

delete from Emp where emp_id =101;
alter table Emp modify emp_id int not null;




#-----------------------------------------
drop table dept;
Create Table Dept (
dept_id int not null,
dept_name varchar(255));

Insert Into Dept (dept_id,dept_name) Values (1,'xyz'),(3,'abc'),(2,'uvw');

